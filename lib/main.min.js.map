{"version":3,"file":"main.min.js","sources":["../src/main.ts"],"sourcesContent":["export type CookieAttributes = {\r\n    ttl?: number | null;\r\n    expires?: Date | string;\r\n    path?: string;\r\n    domain?: string;\r\n    sameSite?: 'Strict' | 'Lax' | 'None';\r\n    secure?: boolean;\r\n};\r\n\r\nexport class Cookie {\r\n    /**\r\n     * Default item validity period in seconds.\r\n     *\r\n     * @type { number | null }\r\n     */\r\n    static #ttl: number | null = null;\r\n\r\n    /**\r\n     * Set the default item validity period in seconds.\r\n     *\r\n     * @param { number | null } value\r\n     */\r\n    static ttl(value: number | null): void {\r\n        this.#ttl = value;\r\n    }\r\n\r\n    /**\r\n     * Set the key to the Cookie.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to create.\r\n     * @param { * } value Value you want to give the key you are creating.\r\n     * @param { CookieAttributes } attributes Cookie configuration options.\r\n     *\r\n     * @returns { string }\r\n     */\r\n    static set(key: string, value: any, attributes: CookieAttributes = {}): string {\r\n        let cookie: string = value === null || value === undefined\r\n            ? `${key}`\r\n            : `${key}=${this.#stringify(value)}`;\r\n\r\n        attributes.ttl ??= this.#ttl;\r\n        attributes.expires = this.#expires(attributes.expires);\r\n\r\n        if (attributes.ttl) {\r\n            attributes.expires = new Date(Date.now() + attributes.ttl * 1000);\r\n        }\r\n\r\n        if (attributes.expires) {\r\n            cookie += `; expires=${attributes.expires.toUTCString()}`;\r\n        }\r\n\r\n        if (attributes.path) {\r\n            cookie += `; path=${attributes.path}`;\r\n        }\r\n\r\n        if (attributes.domain) {\r\n            cookie += `; domain=${attributes.domain}`;\r\n        }\r\n\r\n        if (attributes.sameSite) {\r\n            cookie += `; SameSite=${attributes.sameSite}`;\r\n        }\r\n\r\n        if (attributes.sameSite === 'None' || attributes.secure) {\r\n            cookie += '; Secure';\r\n        }\r\n\r\n        if (attributes.sameSite === 'None' && !attributes.secure) {\r\n            throw new Error('The \"secure\" attribute must be set to \"true\" if \"sameSite\" is set to \"None\".');\r\n        }\r\n\r\n        document.cookie = cookie;\r\n\r\n        return cookie;\r\n    }\r\n\r\n    /**\r\n     * Get the key from the Cookie.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to get.\r\n     *\r\n     * @returns { * }\r\n     */\r\n    static get(key: string, fallback: any = null): any {\r\n        // Escape special regex characters in the key.\r\n        key = key.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n\r\n        const cookies: RegExpMatchArray | null = new RegExp(`(^|;\\\\s*)${key}=([^;]*)`).exec(document.cookie);\r\n\r\n        if (cookies === null) {\r\n            return fallback instanceof Function ? fallback() : fallback ?? null;\r\n        }\r\n\r\n        const cookie: string = cookies[2] as string;\r\n\r\n        try {\r\n            return JSON.parse(cookie);\r\n        } catch {\r\n            return cookie;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the key from the Cookie, or execute the given callback and store the result.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to create.\r\n     * @param { Function } callback Function you want to execute.\r\n     * @param { object } attributes\r\n     *\r\n     * @return { any }\r\n     */\r\n    static remember(key: string, callback: Function, attributes: CookieAttributes = {}): any {\r\n        const cookie: string | null = this.get(key);\r\n\r\n        if (cookie === null) {\r\n            return this.set(key, callback(), attributes);\r\n        }\r\n\r\n        return cookie;\r\n    }\r\n\r\n    /**\r\n     * Return all items stored in the Cookie.\r\n     *\r\n     * @return { {key: string, value: any}[] }\r\n     */\r\n    static all(): { key: string, value: any }[] {\r\n        let cookies: { key: string, value: any }[] = [];\r\n\r\n        if (document.cookie === '') {\r\n            return cookies;\r\n        }\r\n\r\n        document.cookie\r\n            .split('; ')\r\n            .forEach((cookie: string): void => {\r\n                if (cookie === '') {\r\n                    return;\r\n                }\r\n\r\n                const key: string = cookie.split('=')[0] as string;\r\n\r\n                cookies.push({ key, value: this.get(key) });\r\n            });\r\n\r\n        return cookies;\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the cookie.\r\n     *\r\n     * @param { string } key The name of the cookie key to remove.\r\n     * @param { object} attributes Optional cookie attributes (only `path` is allowed).\r\n     */\r\n    static remove(key: string, attributes: Pick<CookieAttributes, 'path'> = {}): void {\r\n        this.set(key, '', { ...attributes, expires: new Date(0) });\r\n    }\r\n\r\n    /**\r\n     * Clear all keys stored in the Cookie.\r\n     *\r\n     * @param { object } attributes Optional cookie attributes (only `path` is allowed).\r\n     */\r\n    static clear(attributes: Pick<CookieAttributes, 'path'> = {}): void {\r\n        this.all().forEach((cookie: { key: string }): void => {\r\n            this.remove(cookie.key, attributes);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determine if the key exists in the Cookie.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to check against\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static has(key: string): boolean {\r\n        return !!this.get(key);\r\n    }\r\n\r\n    /**\r\n     * Determine if any of the keys exists in the Cookie.\r\n     *\r\n     * @param { string | string[] } keys String containing the name of the key you want to check against\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static hasAny(...keys: [string | string[]] | string[]): boolean {\r\n        if (keys.length === 1) {\r\n            if (Array.isArray(keys[0])) {\r\n                keys = keys[0];\r\n            } else {\r\n                keys = [keys[0]];\r\n            }\r\n        }\r\n\r\n        return keys.some((key: string): boolean => this.has(key));\r\n    }\r\n\r\n    /**\r\n     * Determine if the Cookie is empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isEmpty(): boolean {\r\n        return document.cookie.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the Cookie is not empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isNotEmpty(): boolean {\r\n        return !this.isEmpty();\r\n    }\r\n\r\n    /**\r\n     * Retrieves all keys from the Cookie.\r\n     *\r\n     * @return { string[] }\r\n     */\r\n    static keys(): string[] {\r\n        return this.all().map((cookie: { key: string, value: any }): string => cookie.key);\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of items in the Cookie.\r\n     *\r\n     * @return { number }\r\n     */\r\n    static count(): number {\r\n        return this.all().length;\r\n    }\r\n\r\n    /**\r\n     * Updates the item expiration time.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to update.\r\n     * @param { number | null } ttl Item validity period in seconds.\r\n     * @param { object } attributes Optional cookie attributes (only `path` is allowed).\r\n     */\r\n    static touch(key: string, ttl: number | null = null, attributes: Pick<CookieAttributes, 'path'> = {}): void {\r\n        const cookie: any = this.get(key);\r\n\r\n        if (cookie === null) {\r\n            return;\r\n        }\r\n\r\n        ttl ??= this.#ttl;\r\n\r\n        this.set(key, cookie, { ttl, ...attributes });\r\n    }\r\n\r\n    /**\r\n     * Dump the key from the Cookie.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to dump.\r\n     */\r\n    static dump(key: string): void {\r\n        console.log(this.get(key));\r\n    }\r\n\r\n    /**\r\n     * Stringifies a value for cookie storage.\r\n     *\r\n     * @param { * } value Value to be stored in cookie.\r\n     *\r\n     * @returns { string }\r\n     */\r\n    static #stringify(value: any): string {\r\n        if (value === null || value === undefined) {\r\n            return '';\r\n        }\r\n\r\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\r\n            return value.toString();\r\n        }\r\n\r\n        try {\r\n            return JSON.stringify(value);\r\n        } catch {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts expires attribute to Date object if it's a string.\r\n     *\r\n     * @param { Date | string } expires Date object or date string.\r\n     *\r\n     * @returns { Date | undefined }\r\n     */\r\n    static #expires(expires?: Date | string): Date | undefined {\r\n        if (!expires) {\r\n            return undefined;\r\n        }\r\n\r\n        if (expires instanceof Date) {\r\n            return expires;\r\n        }\r\n\r\n        try {\r\n            const date = new Date(expires);\r\n\r\n            return isNaN(date.getTime()) ? undefined : date;\r\n        } catch {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n"],"names":["Cookie","ttl","value","__classPrivateFieldSet","this","_a","_Cookie_ttl","set","key","attributes","cookie","__classPrivateFieldGet","_Cookie_stringify","call","_b","expires","_Cookie_expires","Date","now","toUTCString","path","domain","sameSite","secure","Error","document","get","fallback","replace","cookies","RegExp","exec","Function","JSON","parse","remember","callback","all","split","forEach","push","remove","Object","assign","clear","has","hasAny","keys","length","Array","isArray","some","isEmpty","isNotEmpty","map","count","touch","dump","console","log","toString","stringify","date","isNaN","getTime","undefined"],"mappings":"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"}