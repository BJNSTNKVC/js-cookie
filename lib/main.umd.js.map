{"version":3,"file":"main.umd.js","sources":["../src/main.ts"],"sourcesContent":["export type CookieAttributes = {\r\n    ttl?: number | null;\r\n    expires?: Date | string;\r\n    path?: string;\r\n    domain?: string;\r\n    sameSite?: 'Strict' | 'Lax' | 'None';\r\n    secure?: boolean;\r\n};\r\n\r\nexport class Cookie {\r\n    /**\r\n     * Default item validity period in seconds.\r\n     *\r\n     * @type { number | null }\r\n     */\r\n    static #ttl: number | null = null;\r\n\r\n    /**\r\n     * Set the default item validity period in seconds.\r\n     *\r\n     * @param { number | null } value\r\n     */\r\n    static ttl(value: number | null): void {\r\n        this.#ttl = value;\r\n    }\r\n\r\n    /**\r\n     * Set the key to the Cookie.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to create.\r\n     * @param { * } value Value you want to give the key you are creating.\r\n     * @param { CookieAttributes } attributes Cookie configuration options.\r\n     *\r\n     * @returns { string }\r\n     */\r\n    static set(key: string, value: any, attributes: CookieAttributes = {}): string {\r\n        let cookie: string = value === null || value === undefined\r\n            ? `${key}`\r\n            : `${key}=${this.#stringify(value)}`;\r\n\r\n        attributes.ttl ??= this.#ttl;\r\n        attributes.expires = this.#expires(attributes.expires);\r\n\r\n        if (attributes.ttl) {\r\n            attributes.expires = new Date(Date.now() + attributes.ttl * 1000);\r\n        }\r\n\r\n        if (attributes.expires) {\r\n            cookie += `; expires=${attributes.expires.toUTCString()}`;\r\n        }\r\n\r\n        if (attributes.path) {\r\n            cookie += `; path=${attributes.path}`;\r\n        }\r\n\r\n        if (attributes.domain) {\r\n            cookie += `; domain=${attributes.domain}`;\r\n        }\r\n\r\n        if (attributes.sameSite) {\r\n            cookie += `; SameSite=${attributes.sameSite}`;\r\n        }\r\n\r\n        if (attributes.sameSite === 'None' || attributes.secure) {\r\n            cookie += '; Secure';\r\n        }\r\n\r\n        if (attributes.sameSite === 'None' && !attributes.secure) {\r\n            throw new Error('The \"secure\" attribute must be set to \"true\" if \"sameSite\" is set to \"None\".');\r\n        }\r\n\r\n        document.cookie = cookie;\r\n\r\n        return cookie;\r\n    }\r\n\r\n    /**\r\n     * Get the key from the Cookie.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to get.\r\n     *\r\n     * @returns { * }\r\n     */\r\n    static get(key: string): any {\r\n        // Escape special regex characters in the key.\r\n        key = key.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n\r\n        const cookies: RegExpMatchArray | null = new RegExp(`(^|;\\\\s*)${key}=([^;]*)`).exec(document.cookie);\r\n\r\n        if (cookies === null) {\r\n            return null;\r\n        }\r\n\r\n        const cookie: string = cookies[2] as string;\r\n\r\n        try {\r\n            return JSON.parse(cookie);\r\n        } catch {\r\n            return cookie;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the key from the Cookie, or execute the given callback and store the result.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to create.\r\n     * @param { Function } callback Function you want to execute.\r\n     * @param { object } attributes\r\n     *\r\n     * @return { any }\r\n     */\r\n    static remember(key: string, callback: Function, attributes: CookieAttributes = {}): any {\r\n        const cookie: string | null = this.get(key);\r\n\r\n        if (cookie === null) {\r\n            return this.set(key, callback(), attributes);\r\n        }\r\n\r\n        return cookie;\r\n    }\r\n\r\n    /**\r\n     * Return all items stored in the Cookie.\r\n     *\r\n     * @return { object[] }\r\n     */\r\n    static all(): { key: string, value: any }[] {\r\n        let cookies: { key: string, value: any }[] = [];\r\n\r\n        if (document.cookie === '') {\r\n            return cookies;\r\n        }\r\n\r\n        document.cookie\r\n            .split('; ')\r\n            .forEach((cookie: string): void => {\r\n                if (cookie === '') {\r\n                    return;\r\n                }\r\n\r\n                const key: string = cookie.split('=')[0] as string;\r\n\r\n                cookies.push({ key, value: this.get(key) });\r\n            });\r\n\r\n        return cookies;\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the cookie.\r\n     *\r\n     * @param { string } key The name of the cookie key to remove.\r\n     * @param { object} attributes Optional cookie attributes (only `path` is allowed).\r\n     */\r\n    static remove(key: string, attributes: Pick<CookieAttributes, 'path'> = {}): void {\r\n        this.set(key, '', { ...attributes, expires: new Date(0) });\r\n    }\r\n\r\n    /**\r\n     * Clear all keys stored in the Cookie.\r\n     *\r\n     * @param { object } attributes Optional cookie attributes (only `path` is allowed).\r\n     */\r\n    static clear(attributes: Pick<CookieAttributes, 'path'> = {}): void {\r\n        this.all().forEach((cookie: { key: string }): void => {\r\n            this.remove(cookie.key, attributes);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determine if the key exists in the Cookie.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to check against\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static has(key: string): boolean {\r\n        return !!this.get(key);\r\n    }\r\n\r\n    /**\r\n     * Determine if any of the keys exists in the Cookie.\r\n     *\r\n     * @param { string | string[] } keys String containing the name of the key you want to check against\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static hasAny(...keys: [string | string[]] | string[]): boolean {\r\n        if (keys.length === 1) {\r\n            if (Array.isArray(keys[0])) {\r\n                keys = keys[0];\r\n            } else {\r\n                keys = [keys[0]];\r\n            }\r\n        }\r\n\r\n        return keys.some((key: string): boolean => this.has(key));\r\n    }\r\n\r\n    /**\r\n     * Determine if the Cookie is empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isEmpty(): boolean {\r\n        return document.cookie.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Determine if the Cookie is not empty.\r\n     *\r\n     * @return { boolean }\r\n     */\r\n    static isNotEmpty(): boolean {\r\n        return !this.isEmpty();\r\n    }\r\n\r\n    /**\r\n     * Retrieves all keys from the Cookie.\r\n     *\r\n     * @return { string[] }\r\n     */\r\n    static keys(): string[] {\r\n        return this.all().map((cookie: { key: string, value: any }): string => cookie.key);\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of items in the Cookie.\r\n     *\r\n     * @return { number }\r\n     */\r\n    static count(): number {\r\n        return this.all().length;\r\n    }\r\n\r\n    /**\r\n     * Updates the item expiration time.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to update.\r\n     * @param { number | null } ttl Item validity period in seconds.\r\n     * @param { object } attributes Optional cookie attributes (only `path` is allowed).\r\n     */\r\n    static touch(key: string, ttl: number | null = null, attributes: Pick<CookieAttributes, 'path'> = {}): void {\r\n        const cookie: any = this.get(key);\r\n\r\n        if (cookie === null) {\r\n            return;\r\n        }\r\n\r\n        ttl ??= this.#ttl;\r\n\r\n        this.set(key, cookie, { ttl, ...attributes });\r\n    }\r\n\r\n    /**\r\n     * Dump the key from the Cookie.\r\n     *\r\n     * @param { string } key String containing the name of the key you want to dump.\r\n     */\r\n    static dump(key: string): void {\r\n        console.log(this.get(key));\r\n    }\r\n\r\n    /**\r\n     * Stringifies a value for cookie storage.\r\n     *\r\n     * @param { * } value Value to be stored in cookie.\r\n     *\r\n     * @returns { string }\r\n     */\r\n    static #stringify(value: any): string {\r\n        if (value === null || value === undefined) {\r\n            return '';\r\n        }\r\n\r\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\r\n            return value.toString();\r\n        }\r\n\r\n        try {\r\n            return JSON.stringify(value);\r\n        } catch {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts expires attribute to Date object if it's a string.\r\n     *\r\n     * @param { Date | string } expires Date object or date string.\r\n     *\r\n     * @returns { Date | undefined }\r\n     */\r\n    static #expires(expires?: Date | string): Date | undefined {\r\n        if (!expires) {\r\n            return undefined;\r\n        }\r\n\r\n        if (expires instanceof Date) {\r\n            return expires;\r\n        }\r\n\r\n        try {\r\n            const date = new Date(expires);\r\n\r\n            return isNaN(date.getTime()) ? undefined : date;\r\n        } catch {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}